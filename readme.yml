rodar terraform no docker: docker run -it -v $PWD:/app -w /app --entrypoint "" hashicorp/terraform:light sh
manipular json:
    - apk -U add jq
    - ex:
        terraform state pull | jq .resources
Grafo:
    - apk -U add graphviz

- Blocks: ~= Obj

- Arguments: x = y in block, all arguments is pre-defined

- Identifiers: arguments/blocks custom names

- Loops:
    for_each (only map/sets):
        inside module:
            resource "azurerm_resource_group" "rg"{
                    for_each = {
                        a_group = "eastus",
                        another_group = "westus2"
                    }
                    name = each.key
                    location = each.value
            }
        with Sets:
            variable "subnets_ids"{
                type = list(string)
            }
            resource "aws_instance" "server"{
                for_each = toset(var.subnets_ids)

                ami = "ami-777777"
                instance_type = "t2.micro"
                subnet_id = each.key

                tags = {
                    Name = "Server ${each.key}"
                }
            }


- Dymanic blocks:
    Cria varios blocos dentro de outro bloco:
    resource "aws_security_group" "example"{
        name = "example"

        dynamic "ingress"{
            for_each = var.service_ports
            content{ # conteudo que cada bloco ingress vai receber
                from_port = ingress.value # {{ nome do bloco }}.{{ item do loop }}
                to_port = ingress.value
                protocol = "tcp"
            }
        }
    }

- Expressions: 
    types:
        - string: "hello"
        - number: 1 / 1.3213
        - bool: true / false
        - list: ["a", "b", "c"]
        - map: {name = "italo", age = 21}
        - null: omit
    Complex types:
        Tipos complexos aceitam apenas um tipo por vez
        Any: aceita qualquer tipo de variaveis, porém quando declarado,
        permanece com o mesmo tipo declarado inicialmente até o fim.
        - list(type) any
        - map(type) any
        - set(type) coleção de tipos únicos (sem identificador ou ordem)
    Structural types:
        object(...) {<KEY> = <TYPE>, <KEY> = <TYPE>, <KEY> = <TYPE>}
            ex: object({name=string, age=number})
                {
                 name = "italo"
                 age = 21
                }
        tuple(...) [<TYPE>,<TYPE>,<TYPE>,<TYPE>]
            ex: tuple([string, number, bool])
                ["i", 21, true]

    types auto conversion:
        true <-> "true"
        false <-> "false"
        11 <-> "11"

- String templates:
    - "Hello, ${var.name}"
    - "Hello %{ if var.name != ""}${ var.name }%{ else }unnamed%{ endif }!"


- Input Variables:
    Invalid Identifiers:
        - source
        - version
        - providers
        - count
        - for_each
        - lifecycle
        - depends_on
        - locals
    Arguments:
        default: default value
        type: 
        description:
        validation:
        sensitive:

- Presedencia de Variavel: Os ultimos tem presedencia
    - enviroment variables
    - terraform.tfvars
    - terraform.tfvars.json
    - *.auto.tfvars ou *.auto.tfvars.json
    -  -var ou -var-file

- Modules:
    fluxo (ex):
        1. modulo root: gera input para o modulo filho
        2. modulo child: provisiona resources no provedor
        3. modulo child: gera outputs para o modulo raiz
        4. modulo root: gera outputs para o operador
    tudo é input, exerto:
        - source
        - version
        - providers

- Terraform[module] > Backends:
    - responsavel por guardar o "state"

- Tfvars:
    Qualquer arquivo que terminar com ".auto.tfvars" ou ".auto.tfvars.json" vai ser carregado automaticamente

[cmd] terraform init:
    - inicia o .terraform, tem tudo que o binario local precisa (plugins etc...)
    - configura o backend

[cmd] terraform plan: 
    - Verifica oque vc escreveu e o que tem no state
    terraform plan -destroy:
        - Cria um plano de destruição
    terraform apply:
        - (Após o plan) Aplica o plano a infra


[cmd] terraform destroy:
    -  Destroi tudo que tem nos arquivos HCL

[cmd] terraform console [options] [dir]:
    - O console interage com o state

[cmd] terraform refresh:
    - Atualiza o state de acordo com a infraestrutura real

State:
    Armazena informacoes que vc manipula atravez do terraform, 
    com proposito de mapear o mundo real

    Dados sensiveis:
        - ative o encrypt em seu backend
            - O state apenas é criptografados após o "apply"

    Performace:
        - Funciona como cache dos atributos de todos os recursos.
        - Quando rodar "terraform plan", o terraform Verifica
            norvamento os recursos com o provedor, porém para
            grandes infraestruturas é recomentavel usar 
            "terraform [plan/apply] -refresh=false" pra que
            isto não aconteça.

    State locking:
        - Bloqueia seu "state" para todas as operações que podem escrever no "state"
        - [Required] DynamoDb

    [cmd] terraform state:
        - pull >> state-local.tfstate: mostra o "state" remoto no stdout
        - push state-local.tfstate: manda o "state" local para o remoto
            - [Warning]: antes do "push" o serial tem que ser atualizado
        - list: lista todos recursos
            - aws_instance.bar
            - module.elb
            - id=sg-1234abcd
        - mv [options] SOURCE DESTINATION:
            - renomeando recurso:
                - terraform state mv "aws_instance.web" "aws_instance.web2" 
            - Adiciona a instacia ao modulo:
                - terraform state mv aws_instance.web module.app.aws_instance.web 
        - rm: Não destroi fisicamente os recursos
            - terraform state rm module.app.aws_instance.web2

Taint:
    Marca manualmente qual "resource" deve ser recriado
    após o plan e apply.

    terraform taint [options] address:
        - terraform taint aws_instance.web[0]
        - terraform untaint aws_instance.web[0]:
            remover marca de resconstrução

Graph:
    Gerar representação visual da configuração ou executação do plan
    [cmd]terraform graph -type=plan:
        por padrão ele pegar o grafo do "plan", porém pode pegar do
        "plan-destroy", "apply", "validade", "input", "refresh"
    [cmd/grafo] terraform graph | dot -Tsvg > graph.svg:
        renderiza o grafo

Validações:
    Vai validar se o código existe erro sintatico:
        [cmd] terraform init -backend=false:
            apenas para gerar o diretorio do terraform
            para que o validade funcione.
        [cmd] terraform valdiate [option] [dir]:
            options:
                -json
                -no-color

    Vai reescrever o código para a formatação correta:
        [cmd] terraform fmt [options] [DIR]:
            options:
                -list=false
                -write=false
                -diff
                -check: ajuda no pipelane retornando codigo de erro ex= rc 0, rc 3
                -recursive

Workspaces: Multiplos "states" isolados para o mesmo backend
    [cmd] terraform workspace new [workspace-name]: Criar novo workspace
    [cmd] terraform workspace select [workspace-name]: Seleciona workspace
    [cmd] terraform workspace list: Lista todos os workspaces
    ex:
        - terraform workspace new production
        - terraform workspace new staging
    tips:
        - Use interpolação para usar valores para cada workspace:
            ex: resource "aws_instance" "example"{
                    count = "${ terraform.workspace == 'default' ? 5 : 1 }"
                }

Dependencies:
    Implicit (ex):
        EIP{EC2.ID} -> EC2: |
            EIP depende do EC2(id), então o terraform, automaticamente
            provisiona primeira a EC2 para ter seu id que será usado no
            EIP.
        apply (ex):
            - create EC2
            - create EIP (com o id do ec2)
        destroy (ex):
            - remove EIP
            - remove EC2
    Explicit:
        depends_on [list] (ex):
            EIP{EC2.ID} -> EC2.web <- EC2.west{depends_ond[EC2.web]}
        apply (ex):
            - create EC2.web
            - create. EC2.west
            - create EIP
        destroy (ex):
            - remove EIP
            - remove EC2.west
            - remove EC2.web


[cmd] terraform import: Apenas manipula o "state", não gera codigo.
        - terraform import aws_instance.example i-abcd1234

Troubleshooting:
   TF_LOG:
        - TRACE: Muito verboso
        - DEBUG: verboso
        - INFO: normal
        - WARM / ERROR: pouco verboso
    ex[cmd]:
        TF=DEBUG terraform plan -out plan


[Block] Provider:
    - Informa em qual provedor de recursos vc vai solicitar
    Meta arguments [disponivel em todos providers]:
        - alias: Multiple Priver Configurations
        - version: informa a versão do plugin

[Block] Resource:
    - null_resource: 
    [Block] Provisioner:
        - Arguments:
            local-exec: chama o comando após o recurso ser criado
            remote-exec: chama scripts diretamente no servidor remoto
            chef: ...
            connection: ...
            file: ...
            habitat: ...
            null_resource: ...
            salt-masterless: ...
        [Block] connection:
            connection {
                type = "ssh"
                    host = self.associate_public_ip_address
                    user = "ec2-user"
                    private_key = file("terraform.pem")
                }
        - options:
            - when (ex):
                - when = destroy
            - on_failure (ex):
                - on_failure = continue
            - command = "echo ${aws_instance.web.private_ip} >> private_ips.txt"
            - inline = [
                    "sudo amazon-linux-extras install -y nginx1.12",
                    "sudo systemctl start nginx"
                ]
Boas praticas:
    /main.tf: apenas providers e terraform

Hellp:
    - terraform (docs)
    - terraform -install-autocomplete

========================================================================================================================

TF + ANSIBLE pipelines:
    1. ansible:
     - clone
     - teste estático (yamllint)
     - baixar dependencias
     - teste Molecule (suit de teste do Ansible)
        - cria maquina
        - roda o ansible
        - varifica (teste)
        - destroy
     - Docker build / Packer build / EMI...
     - Docker push / Subir artefato...

    2. terrafrom:
     - Provisiona [Docker image / arterfato / EMI (gerado pela pipeline do ansible)]
     # - config DNS
     # - CND
     # - deploy blue/green
